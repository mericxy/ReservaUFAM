# üìö Sistema Reservas UFAM

O sistema **Reservas UFAM** √© uma aplica√ß√£o web que, como o nome diz, cria e gerencia reservas de todos os recursos que a UFAM/ICET disp√µe, tais como espa√ßos f√≠sicos (salas de confer√™ncia, audit√≥rio) e ve√≠culos üöóüè¢. 

## ‚öôÔ∏è Funcionalidades Principais

- üè¢ **Reserva de Recursos:** Salas, audit√≥rios e ve√≠culos podem ser reservados por usu√°rios autorizados.
- üìÖ **Gerenciamento de Eventos:** Permite agendar atividades acad√™micas e eventos institucionais.
- üõ°Ô∏è **Autentica√ß√£o de Usu√°rios:** Login com CPF ou SIAPE, incluindo valida√ß√£o e aprova√ß√£o administrativa.
- ‚úâÔ∏è **Envio de E-mails:** Confirma√ß√£o de cadastro, reserva e notifica√ß√µes de aprova√ß√£o/rejei√ß√£o.
- üñ•Ô∏è **Painel Administrativo:** Administradores podem aprovar/rejeitar cadastros e reservas, criar eventos priorit√°rios e acompanhar o calend√°rio institucional.
- üì± **Responsividade:** Sistema otimizado para uso em dispositivos m√≥veis.

---

# üóÇÔ∏è Diagramas Modelo C4 do Reservas UFAM

> (Aqui voc√™ pode inserir seus diagramas C4 seguindo a estrutura de contexto, containers, componentes e c√≥digo, conforme detalhado anteriormente.)

---

# üöÄ Como Executar o Projeto ReservaUFAM Localmente

## üß∞ Pr√©-requisitos

Certifique-se de ter os seguintes softwares instalados em sua m√°quina:
- üóÇÔ∏è **Git**: para clonar o reposit√≥rio.
- üê≥ **Docker**: para executar os containers da aplica√ß√£o.
- üêç **Python** (recomendado 3.11): para desenvolvimento/testes do backend.
- üü¢ **Node.js** (recomendado 14): para desenvolvimento/testes do frontend.
- üì¶ **npm**: gerenciador de pacotes do Node.js.
- üêò **PostgreSQL** (recomendado 12): banco de dados relacional.

## üõ†Ô∏è Passo a Passo

### 1Ô∏è‚É£ Clone o Reposit√≥rio

```bash
git clone https://github.com/mericxy/ReservaUFAM.git
cd ReservaUFAM
```

### 2Ô∏è‚É£ Configure as Vari√°veis de Ambiente

Crie e configure o arquivo `.env` na raiz do projeto e no diret√≥rio do backend com as vari√°veis necess√°rias (ex: credenciais do banco, chaves de autentica√ß√£o, configura√ß√µes de e-mail) üîí.

### 3Ô∏è‚É£ Inicie o Ambiente com Docker

Execute os containers do projeto usando o Docker Compose:

```bash
docker-compose up --build -d
```
‚è≥ Aguarde a inicializa√ß√£o dos containers.  
Caso ocorra algum erro e queira parar o ambiente:

```bash
docker-compose down -v
```

### 4Ô∏è‚É£ Acesse a Aplica√ß√£o

- **Backend (Django):** http://localhost:8000 üõ†Ô∏è
- **Frontend (React):** http://localhost:5173 üíª

### 5Ô∏è‚É£ Interaja com os Containers

Para acessar o terminal do backend ou frontend dentro dos containers:

**Django (backend):**
```bash
cd backend
docker exec -it reservaufam_backend bash
```

**React (frontend):**
```bash
cd frontend
docker exec -it reservaufam_frontend bash
```

Para sair do container:
```bash
exit
```

### 6Ô∏è‚É£ Banco de Dados

Certifique-se de que as configura√ß√µes do banco est√£o corretas no `.env` e que o servi√ßo est√° rodando. O PostgreSQL ser√° iniciado automaticamente pelo Docker Compose se configurado üêò.

### 7Ô∏è‚É£ Outras Depend√™ncias

O projeto possui depend√™ncias listadas nos arquivos:
- `backend/requirements.txt` (para Python/Django)
- `frontend/package.json` (para Node.js/React)

> Para instalar manualmente (fora dos containers), execute:
>
> **Backend:**
> ```bash
> pip install -r backend/requirements.txt
> ```
> **Frontend:**
> ```bash
> cd frontend
> npm install
> ```

---

## ‚ÑπÔ∏è Observa√ß√µes

- O projeto √© totalmente containerizado, ent√£o n√£o √© necess√°rio instalar manualmente as depend√™ncias se voc√™ utilizar Docker.
- Recomenda-se rodar a aplica√ß√£o em ambiente Linux ou WSL para evitar problemas de compatibilidade com Docker.
- Em caso de d√∫vidas, consulte o README do projeto para mais detalhes.

‚ú® Pronto! Agora √© s√≥ come√ßar a usar o ReservaUFAM! ‚ú®
